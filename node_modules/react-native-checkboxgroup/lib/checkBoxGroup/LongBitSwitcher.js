"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class LongBitSwitcher {
    constructor(...keys) {
        this.MAX_LEN = Infinity;
        // if (!keys || keys.length == 0){throw new Error("开关不能空，需要至少一个位");}
        this.map = new Map(keys.map((e) => [e, false]));
    }
    getKeys() {
        return this.map.keys();
    }
    isAllOn() {
        let values = [...this.map.values()];
        return values.indexOf(false) == -1;
    }
    /*有一个开即为开*/
    isOn(flag) {
        if (flag) {
            return !!(this.map.has(flag) ? this.map.get(flag) : false);
        }
        return [...this.map.values()].indexOf(true) != -1;
    }
    on(flag) {
        if (flag && this.map.has(flag)) {
            this.map.set(flag, true);
        }
        return this;
    }
    off(flag) {
        if (flag && this.map.has(flag)) {
            this.map.set(flag, false);
        }
        return this;
    }
    /*把自己的key对应的状态位从目标对象上拷贝下来*/
    copyFrom(from) {
        let fromKeysArr = [...from.getKeys()];
        for (let key of this.getKeys()) {
            if (fromKeysArr.indexOf(key) !== -1) {
                let isOn = from.isOn(key);
                isOn ? (this.on(key)) : (this.off(key));
            }
        }
        return this;
    }
    /*对比是否有一样的开关位,返回不同的数组*/
    switcherDiff(target) {
        let thisK = this.getKeys(), arr1 = [...thisK].sort(), arr2;
        if (target instanceof Array) {
            arr2 = target.sort();
        }
        else {
            let targetK = target.getKeys();
            arr2 = [...targetK].sort();
        }
        let added = [], //自己没有的但是target里有
        deleted = []; //自己原本有但是target里面没有了
        if (arr1.join("-") == arr2.join("-"))
            return {
                added, deleted, diff: false
            };
        let uniqueAll = new Set(arr1.concat(arr2));
        for (let unique of uniqueAll) {
            let originHas = arr1.includes(unique);
            let nowHas = arr2.includes(unique);
            if (originHas != nowHas) {
                (originHas ? deleted : added).push(unique);
            }
        }
        return {
            added, deleted, diff: !(added.length == deleted.length && deleted.length == 0)
        };
    }
}
exports.default = LongBitSwitcher;
