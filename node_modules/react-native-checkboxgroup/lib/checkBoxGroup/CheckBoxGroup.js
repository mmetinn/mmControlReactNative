"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Created by syjmac on 2017/9/23.
 */
const React = require("react");
const react_native_1 = require("react-native");
const LongBitSwitcher_1 = require("./LongBitSwitcher");
const Selectable_1 = require("./Selectable");
const CheckBoxItem_1 = require("./CheckBoxItem");
const invariant_1 = require("./invariant");
class CheckBoxGroup extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.state = {
            isSelected: false
        };
        this._items = new Map();
        /**
         * 单选模式不能在组级调用全选，只能用于反选，但是必须明确的传入trueOrFalse =false
         * @param trueOrFalse
         */
        this.toggle = (trueOrFalse) => {
            if (this.isGroupDisabled()) {
                return;
            }
            let isRadioMode = this.isRadioMode();
            //单选模式不能在组级调用全选，只能用于反选，但是必须明确的传入trueOrFalse =false
            if (!isRadioMode || isRadioMode && trueOrFalse != undefined && !trueOrFalse) {
                let isSelectedNext = trueOrFalse == undefined ? !this.state.isSelected : trueOrFalse;
                if (isSelectedNext) {
                    this.select(this.onChange);
                }
                else {
                    this.deselect(this.onChange);
                }
                //console.log("selectedChanged",this._identifier,isSelectedNext?"ON":"OFF")
                this.props.selectedChanged && this.props.selectedChanged(this._identifier, isSelectedNext);
                // this.onChange(this._identifier,isSelectedNext)
            }
        };
        this.selectedChanged = (childKey, isSelected) => {
            isSelected ? this.bs.on(childKey) : this.bs.off(childKey);
            let nextGrpState = this.bs.isAllOn();
            if (nextGrpState != this.state.isSelected) {
                this.setState({ isSelected: nextGrpState });
                //console.log("selectedChanged",this._identifier,nextGrpState?"ON":"OFF")
                this.props.selectedChanged && this.props.selectedChanged(this._identifier || "", nextGrpState);
            }
        };
        this.radioSelectedChanged = (childKey, isSelected) => {
            if (isSelected) {
                //单选模式正选 需要看是否已有选中项，有就要关掉
                let lastON = this.onKey;
                let onItem = this._items.get(lastON);
                //childKey!=lastON防止同一子组中的其他项被选中时候整个组被上级反选
                if (onItem && (childKey != lastON)) {
                    onItem.deselect();
                }
                this.bs.on(childKey);
                this.onKey = childKey;
                this.props.selectedChanged && this.props.selectedChanged(this._identifier || "", true);
            }
            else {
                this.bs.off(childKey);
                this.onKey = "";
            }
        };
        this.onChange = (v) => {
            this.props.onChange && this.props.onChange(v ? v : this.getSelectedValue(false));
        };
        this.enrichChildProps = (childKey, isGroupChild = false) => {
            //console.log("ownKey", ownKey)
            const disabledChildrenKeysArr = this.props.disabled || [];
            const props = {
                identifier: childKey,
                key: childKey,
                ref: (item) => {
                    item && this.addItem(childKey, item);
                },
                selectedChanged: this.isRadioMode() ? this.radioSelectedChanged : this.selectedChanged,
                onChange: this.onChange,
                renderCheckBox: this.props.renderCheckBox,
                rowTemplate: this.props.rowTemplate,
                mode: this.props.mode
            };
            if (!isGroupChild) {
                props.disabled = disabledChildrenKeysArr.includes(childKey);
            }
            return props;
        };
        this._identifier = props.identifier || ("Group_" + this.getRandomBum());
        this.keys = this.getKeysArr(this.props);
        this.bs = new LongBitSwitcher_1.default(...this.keys);
    }
    addItem(key, item) {
        if (!this._items.has(key)) {
            this._items.set(key, item);
        }
    }
    removeItem(key) {
        if (this._items.has(key)) {
            this._items.delete(key);
        }
    }
    getRandomBum() {
        return (Math.ceil(Math.random() * 10000000));
    }
    /**获取自组件的key数组*/
    getKeysArr(props) {
        __DEV__;
        return React.Children.map(props.children, (e, index) => {
            if (__DEV__)
                invariant_1.default(e.key != undefined, "%s的子元素缺少属性 key", this._identifier);
            return e.key;
            /*this._identifier+(this.isSelectableComp(e)
             ? ("_Group_"+this.getRandomBum())
             : "_Item_") +index*/
        });
    }
    syncChildrenChange(nextProps) {
        let newKeysArr = this.getKeysArr(nextProps);
        let result = this.bs.switcherDiff(newKeysArr);
        if (result.diff) {
            //子元素key被改变了,从新生成开关 对比总状态
            let newBS = new LongBitSwitcher_1.default(...newKeysArr);
            this.bs = newBS.copyFrom(this.bs);
            let oldIsAllOn = this.state.isSelected, newIsAllOn = this.bs.isAllOn();
            //如果有删除的元素需要把ref从this.items表中移除
            if (result.deleted.length != 0) {
                for (let key of result.deleted) {
                    this.removeItem(key);
                }
            }
            if (newIsAllOn != oldIsAllOn) {
                this.setState({ isSelected: newIsAllOn });
            }
        }
    }
    componentWillReceiveProps(nextProps, nextState) {
        this.syncChildrenChange(nextProps);
    }
    isRadioMode() {
        return this.props.mode === "RadioGroupMode";
    }
    getSelectedValue(isFilterFalse = true) {
        let children = new Map();
        for (let [key, selectable] of this._items) {
            if (isFilterFalse) {
                let val = selectable.getSelectedValue();
                //过滤没选中的项 ／／最底层item和group级别的item要区别对待
                //一般item 只要判断选中值为正
                if (!val.children) {
                    val.value && children.set(key, val);
                }
                else {
                    //组级别item 要判断children有值
                    (val.children.size != 0) && children.set(key, val);
                }
            }
            else {
                children.set(key, selectable.getSelectedValue(false));
            }
        }
        return {
            key: this._identifier,
            value: this.state.isSelected,
            children
        };
    }
    select(cb) {
        const disables = this.props.disabled || [];
        this._items.forEach((v, k) => {
            if (!disables.includes(k)) {
                this.bs.on(k);
                v.select();
            }
        });
        this.setState({ isSelected: /*(disables.length === 0) &&*/ true }, () => {
            cb && cb();
        });
    }
    deselect(cb) {
        const disables = this.props.disabled || [];
        this._items.forEach((v, k) => {
            if (!disables.includes(k)) {
                this.bs.off(k);
                v.deselect();
            }
        });
        this.setState({ isSelected: false }, () => {
            cb && cb();
        });
    }
    /*
    这里使用props上的特性值__Selectable_IDENTIFIER__ 来判定这个是不是一个Selectable的组件
    * */
    isSelectableComp(reactChild) {
        return reactChild.props.__Selectable_IDENTIFIER__ === Selectable_1.IDENTIFIER;
    }
    isGroupDisabled() {
        //TODO: 不那么严格 待定
        return (this.props.disabled || []).length === this.keys.length;
    }
    getTitleBar() {
        let { renderCheckBox, isGroupTitleBarVisiable, renderTitle, disabled = [] } = this.props;
        return isGroupTitleBarVisiable
            ? <react_native_1.View style={sts.groupTitleBar}>
				<react_native_1.TouchableOpacity onPress={() => { this.toggle(); }} activeOpacity={1} style={{}}>
					{!this.isRadioMode()
                && renderCheckBox
                && renderCheckBox(this.state.isSelected, disabled.length === this.keys.length)}
				</react_native_1.TouchableOpacity>
				{renderTitle && renderTitle()}
			</react_native_1.View>
            : null;
    }
    groupFooter() {
        return this.props.renderFooter && this.props.renderFooter();
    }
    render() {
        //console.log(`CheckboxGroup ${this._identifier} render`)
        let { style } = this.props;
        let children = React.Children.map(this.props.children, (reactChild, index) => {
            let key = reactChild.key;
            invariant_1.default(key != null, "%s的子元素缺少属性 key", this._identifier);
            if (this.isSelectableComp(reactChild)) {
                return React.cloneElement(reactChild, Object.assign({}, this.enrichChildProps(key, true)));
            }
            else {
                return (<CheckBoxItem_1.default {...this.enrichChildProps(key)}>
						{reactChild}
					</CheckBoxItem_1.default>);
            }
        });
        return <react_native_1.View style={style}>
			{this.getTitleBar()}
			<react_native_1.View style={[]}>
				{children}
			</react_native_1.View>
			{this.groupFooter()}
		</react_native_1.View>;
    }
}
CheckBoxGroup.IDENTIFIER = Selectable_1.IDENTIFIER;
CheckBoxGroup.defaultProps = {
    renderCheckBox: (isSelected, disabled = false) => {
        return <react_native_1.Text>{disabled ? "Dis" : (isSelected ? "On" : "Off")}  </react_native_1.Text>;
    },
    renderTitle: () => { return null; },
    renderFooter: () => { return null; },
    isGroupTitleBarVisiable: true,
    onChange: (v) => { },
    __Selectable_IDENTIFIER__: Selectable_1.IDENTIFIER
};
exports.default = CheckBoxGroup;
const sts = react_native_1.StyleSheet.create({
    groupTitleBar: {
        flexDirection: "row"
    }
});
