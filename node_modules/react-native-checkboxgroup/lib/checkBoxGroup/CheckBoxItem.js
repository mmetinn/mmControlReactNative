"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Created by syjmac on 2017/9/19.
 */
const React = require("react");
const react_native_1 = require("react-native");
const Selectable_1 = require("./Selectable");
class CheckBoxItem extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            isSelected: false
        };
        this.toggle = () => {
            if (this.props.disabled && !this.state.isSelected) {
                return;
            }
            let current = this.state.isSelected;
            let cb = () => {
                this.props.onChange && this.props.onChange({ key: this.props.identifier, value: this.state.isSelected });
            };
            if (current) {
                this.deselect(cb);
            }
            else {
                this.select(cb);
            }
            //console.log("selectedChanged",this.props.identifier,!current?"ON":"OFF")
            this.props.selectedChanged && this.props.selectedChanged(this.props.identifier, !current);
            // this.props.onChange && this.props.onChange(this.props.identifier, !current)
        };
    }
    getSelectedValue() {
        return {
            key: this.props.identifier,
            value: !this.props.disabled && this.state.isSelected
        };
    }
    select(cb) {
        if (this.props.disabled) {
            return;
        }
        this.setState({ isSelected: true }, () => { cb && cb(); });
    }
    deselect(cb) {
        if (this.props.disabled) {
            return;
        }
        this.setState({ isSelected: false }, () => { cb && cb(); });
    }
    componentDidUpdate(prevProps) {
        //突然变不可用了， 但是目前还是on状态，此时要变不可用
        if (prevProps && this.props.disabled != prevProps.disabled
            && this.state.isSelected) {
            this.toggle();
        }
    }
    render() {
        let { renderCheckBox, rowTemplate, identifier } = this.props;
        let checkbox = (<react_native_1.TouchableOpacity onPress={this.toggle} activeOpacity={1} style={{ justifyContent: "center", alignItems: "center" }}>
				{renderCheckBox && renderCheckBox(this.state.isSelected, this.props.disabled)}
			</react_native_1.TouchableOpacity>);
        //console.log("CheckboxItem render")
        return <react_native_1.View>
			{rowTemplate && rowTemplate(checkbox, this.props.children, identifier)}
		</react_native_1.View>;
    }
}
CheckBoxItem.IDENTIFIER = Selectable_1.IDENTIFIER;
CheckBoxItem.defaultProps = {
    disabled: false,
    selectedChanged(k, isSelected) {
    },
    renderCheckBox: (isSelected) => {
        return <react_native_1.Text>{isSelected ? "On" : "Off"}  </react_native_1.Text>;
    },
    rowTemplate: (checkbox, item, key) => {
        return <react_native_1.View style={{ flexDirection: "row" }}>
				{checkbox}
				{item}
			</react_native_1.View>;
    }
};
exports.default = CheckBoxItem;
